# Sample configuration file of ws2500
#
# The version of this file in the distribution was renamed to dot.ws2500.conf
# to avoid using it unintentionally. 
#
# C. R. Krienke, krienke@uni-koblenz.de
#
# The configuration file is named .ws2500.conf by default and is searched for
# in the current directory as well as in the users HOME directory
# When -c is given on the commandline only the file given as parameter
# to -c is read.
#
# Each config statement  may be placed on one line
# with the format  variable=value
# Capitalisation is not important, so Altitude is the same like altiTUDE.
# The '#'-character starts an comment.
#
#
# The MYSQL wetter database usually used in conjunction with the ws2500
# program can store data of multiple weather stations. Each station has
# an integer id used to distinguish the different weather stations from
# each other. The first station usually has id 1, the second 2, ....
# Please set the correct id for this station:
Stationid=1

# If set to a value !=0 and a sensor has a drop out value that is larger
# than MaxDropOutCount a warning is issued to stderr when running ws2500
# so the usser can check what is going on there. If ws2500 is run by the
# script getws2500data a mail is sent to the admin to flag the error.
# The drop out count is evaluated for each sensor at the time w2500 is run 
# no matter what value it might have had any time before (ws2500 simply
# uses the value the station provides and does not srore this counter).
# MaxDropOutCount=20

# own altitude above nn, for computation of relative air pressure
# Altitude=125

# serial device to use for communication
# SerialPort=/dev/ttyS1

# printTerse: Make output normal (0) or terse (1)
# printTerse=1

# How much rain per counter strike in mm
# Default is set to 0.340 so 1 counter strike of the rainsensor is 
# 0.340 mm of rain
mmRainByCount=0.340 


# You can define tolerance values (!positive! numbers) that serve as a check
# for the sensor values sent by the station. A value is considered  bad if the
# current value of a sensor is  more than a tolerance value bigger or smaller
# than its last value:  abs(Sn-Sm)> tol, where Sn is the current sensors value
# and Sm is the  value one step earlier and tol is the tolerance given. This
# system only works when  ws2500 is called with -n or -x and -C, see below. In
# this case instead of printing  the new value, ws2500 will print the older
# value. If more than a number of  such errors occur in sequence the sensor can
# be disabled, meaning that no data about this sensor will be printed until a
# valid value is received again. Tolerance variables can be defined like this:

#
# variable-name   tolerance_value  max_errors_in_sequence  delta
#
# variable-name is the name of the sensor, see below. tolerance_value is
# the value taken as a tolerance limit abs(Sn-Sm) to two succeeding 
# sensor values.
# max_errors_in_sequence may be 0 meaning, that the sensor will never be
# disabled. Remember: tolerance_value may never be negative! Checks will
# only occur when -C is given to ws2500 in conjunction with -n or -x like
# "ws2500 -n -C inline" or "ws2500 -n -C /tmp/mylastvaluefile.txt".
# If you do not define a tolerance value for a sensor, the tolerance
# check for this sensor will be disabled - there are no tol "defaults".
# The value delta may be zero. If != 0 then each time that a sensor is
# outside of its tolerance, the last value used  to
# compare with the new current value (inorder to find out if the
# difference of both is > the tolerance value of this sensor) 
# will be moved by delta in the direction of current sensor value. 
# By this trick, the sensors data will eventually be again inside its 
# tolerance (if delta != 0). This feature is thought for the situation 
# where a sensor value makes a big jump (think of a warm dry day and
# then a thunderstorm comes with lot of rain. This will lead to a quick
# increase of humidity) so it gets out of band, but actually this jump was not 
# caused by an error but by the weather itself. Since the new sensor value 
# is valid it probably will not change much. Without the delta value or
# delta == 0 only the last value would again and again be used for the
# value to print out. A delta > 0
# will slowly increase/decrease the sensors value and so slowly 
# approach the real sensors value again. At most max_errors_in_sequence 
# delta-corrections of the last-value will be made.  The assumption here is,
# that a real error will only affect one or two values. In this case
# adding a delta is no problem. On the other hand if tolcheck applies
# but the sensors value is correct, the sensors value will probably remain
# where it is for a longer while. Here adding a delta value will help
# the "corrected" sensor value in approaching the real value again.
# Because ws2500 always needs a
# reference value (usually the first value read from the station) it is
# desirable to store the last value read in a file, that can be read
# with the next start of ws2500, so the reference already exists.
# Variable lastvaluefile gives the location of this file. To use this
# file based method call ws2500 with -C config, meaning the Name and Path
# of lastValueFile will be taken from a config file or use -C <path>
# specifying this file directly. If you call with -C inline, no file is
# created, so with each call of ws2500 the first value serves as a first
# reference. The lastValue File is deleted when the program exits unusually or
# if it is aborted eg by pressing Strg-C, Ctrl-C).  The tolerance values 
# are defined with their usual units (eg. Km/h for windspeed)
# except for rain-tolerance. This value is defined by the number of whip-counts
# from the sensor, NOT mm or l/m*m rain. In case a tol check applies to
# the rain sensor, then ws2500 will output a rain amount of 0. The delta
# tol-value (3. col) for the rain sensor is not used. See README for more 
# details about this.
#
# lastvaluefile = 	/tmp/ws2500LastVals.txt
#
# The sample values given are a good starting point with the assumption
# that T/H sensor 1 is an outside sensor.
# variable-name         tol_value  max_err  delta
tolInsideTemperature    = 5.0        10      1.0
tolTemperature_1        = 10.0       10      1.0
tolTemperature_1	= 10.0 	     10      2.0
#tolTemperature_2	= 6.5 	     10      2.0
#tolTemperature_3	= 6.5 	     10      2.0
#tolTemperature_4	= 6.5 	     10      2.0
#tolTemperature_5	= 6.5 	     10      2.0
#tolTemperature_6	= 6.5 	     10      2.0
#tolTemperature_7	= 6.5 	     10      2.0
#tolTemperature_8	= 6.5 	     10      2.0
tolInsideHumidity	= 30  	     10      5
tolHumidity_1		= 30  	     10      5
#tolHumidity_2		= 20  	     10      4
#tolHumidity_3		= 10  	     10      4
#tolHumidity_4		= 10  	     10      4
#tolHumidity_5		= 10  	     10      4
#tolHumidity_6		= 10  	     10      4
#tolHumidity_7		= 10  	     10      4
#tolHumidity_8		= 10  	     10      4
tolPressure		= 5  	     10      1
tolRain			= 35  	     10      3
tolWindspeed		= 40.0	     10      5.0
#tolLux			= 1000	     10      0
#tolEnergy		= 100        10      0

